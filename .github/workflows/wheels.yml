name: Release

on:
  push:
  pull_request:
    paths:
      - setup.py
      - buildutils/**
      - .github/workflows/wheels.yml
      - tools/install_libzmq.sh
      - zmq/utils/*.h

env:
  cython: "0.29.21"
  cibuildwheel: "1.6.4"
  TWINE_NONINTERACTIVE: "1"

jobs:
#   sdist:
#     runs-on: ubuntu-20.04
#
#     steps:
#       - uses: actions/checkout@v2
#
#       - name: setup python
#         uses: actions/setup-python@v2
#         with:
#           python-version: "3.8"
#
#       - name: install dependencies
#         run: |
#           pip install --upgrade pip build
#           pip install cython=="${{ env.cython }}"
#
#       - name: build sdist
#         run: |
#           python setup.py fetch_libzmq
#           python setup.py cython
#           python -m build --sdist .
#
#       - uses: actions/upload-artifact@v2
#         with:
#           name: sdist
#           path: "dist/*.tar.gz"
#           if-no-files-found: error
#
#       - name: Publish to PyPI
#         if: startsWith(github.ref, 'refs/tags/')
#         env:
#           TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#         run: |
#           pip install twine
#           twine upload --skip-existing dist/*.tar.gz

  wheel:
    runs-on: ${{ matrix.os }}

    env:
      CIBW_BEFORE_ALL_MACOS: 'bash tools/install_libzmq.sh'
      CIBW_BEFORE_ALL_LINUX: 'bash tools/install_libzmq.sh'

      CIBW_ENVIRONMENT_MACOS: "ZMQ_PREFIX=/usr/local"
      CIBW_ENVIRONMENT_LINUX: "ZMQ_PREFIX=/usr/local"
      CIBW_ENVIRONMENT_WINDOWS: "ZMQ_PREFIX=libzmq-dll"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
        delvewheel repair
        -v
        --add-path=C:/libzmq-dll
        --no-dll=vcruntime140.dll
        --wheel-dir={dest_dir}
        {wheel}

      CIBW_TEST_REQUIRES: "pytest"
      CIBW_TEST_COMMAND: "pytest -vsx {package}/tools/test_wheel.py"
      CIBW_SKIP: "cp2* cp35* pp2*"
      CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
      CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
      CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw.manylinux_image }}"


    strategy:
      fail-fast: false
      matrix:
        include:
#           - os: macos-10.15
#             name: mac
#
#           - os: ubuntu-20.04
#             name: manylinux1
#             cibw:
#               build: "cp36* cp37*"
#               manylinux_image: manylinux1
#
#           - os: ubuntu-20.04
#             name: manylinux2010
#             cibw:
#               build: "cp38* cp39*"
#               manylinux_image: manylinux2010
#
          - os: windows-2019
            name: win32
            architecture: x86
            cibw:
              build: "cp*win32"

          - os: windows-2016
            name: win32-pypy
            architecture: x86
            cibw:
              build: "pp*win32"

          - os: windows-2019
            name: win_amd64
            architecture: x64
            cibw:
              build: "*win_amd64"

    steps:
      - uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: ${{ matrix.architecture }}

      - name: set Windows extra env for pypy
        shell: bash
        if: matrix.name == 'win32-pypy'

        run: |
          # pypy builds libzmq as an Extension,
          # doesn't bundle dlls (requires separate vcredist install, as pypy itself seems to)
          # bundling external libzmq doesn't seem to work
          echo 'CIBW_REPAIR_WHEEL_COMMAND_WINDOWS=' >> "$GITHUB_ENV"
          echo 'CIBW_ENVIRONMENT_WINDOWS=' >> "$GITHUB_ENV"

      - name: install dependencies
        run: |
          pip install --upgrade setuptools pip wheel
          pip install cibuildwheel=="${{ env.cibuildwheel }}" cython=="${{ env.cython }}"

      - name: install mac dependencies
        if: startsWith(matrix.os, 'mac')
        run: |
          pip install delocate

      - name: install linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          pip install auditwheel

      - name: install windows dependencies
        if: startsWith(matrix.os, 'win')
        run: |
          pip install delvewheel
          python setup.py fetch_libzmq --dll
          xcopy /i libzmq-dll C:\\libzmq-dll

      - name: show environment
        run: |
          pip freeze

      - name: show vcvars
        if: startsWith(matrix.os, 'win')
        run: |
          python tools/showvcvars.py

      - name: list target wheels
        run: |
          python -m cibuildwheel . --print-build-identifiers

      - name: compile Cython sources
        run: |
          python setup.py cython

      - name: build wheels
        run: |
          python -m cibuildwheel .

      - uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.name }}
          path: "wheelhouse/*"
          if-no-files-found: error

      - name: Publish wheels to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install twine
          twine upload --skip-existing wheelhouse/*

#   cross-wheels:
#     # separate build for aarch64 since cibuildwheel can't do arm on GHA fr now
#     runs-on: ubuntu-20.04
#
#     env:
#       ZMQ_PREFIX: /usr/local
#
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - arch: aarch64
#             manylinux: "2014"
#             tag: "cp37-cp37m cp38-cp38 cp39-cp39"
#
#     steps:
#       - uses: actions/checkout@v2
#
#       - name: register qemu
#         run: |
#           docker run --rm --privileged hypriot/qemu-register:v4.2.0
#
#       - name: Build manylinux2014 Python wheels (aarch64)
#         if: matrix.arch == 'aarch64' && matrix.manylinux == '2014'
#         # uses should really support ${{ matrix.arch }} expansion, but it doesn't
#         uses: "RalfG/python-wheels-manylinux-build@v0.3.2-manylinux2014_aarch64"
#         with:
#           python-versions: ${{ matrix.tag }}
#           build-requirements: "cython==${{ env.cython }}"
#           pip-wheel-args: "-v -w ./dist --no-deps"
#           # what we really want is:
#           # system-packages: zeromq-devel
#           # but zeromq-devel not available on aarch64 by default...
#           # it is is epel7, but can't load that early enough
#           # loading rpms by full url seems to work, but we need to specify
#           # all dependencies to do so
#           system-packages: >
#             https://download-ib01.fedoraproject.org/pub/epel/7/aarch64/Packages/z/zeromq-devel-4.1.4-6.el7.aarch64.rpm
#             https://download-ib01.fedoraproject.org/pub/epel/7/aarch64/Packages/z/zeromq-4.1.4-6.el7.aarch64.rpm
#             https://download-ib01.fedoraproject.org/pub/epel/7/aarch64/Packages/l/libsodium-1.0.18-1.el7.aarch64.rpm
#             https://download-ib01.fedoraproject.org/pub/epel/7/aarch64/Packages/o/openpgm-5.2.122-2.el7.aarch64.rpm
#
#       - uses: actions/upload-artifact@v2
#         with:
#           name: wheels-manylinux${{ matrix.manylinux }}_${{ matrix.arch }}
#           path: "dist/*manylinux*.whl"
#           if-no-files-found: error
#
#       - name: setup python
#         uses: actions/setup-python@v2
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           python-version: "3.8"
#
#       - name: Publish wheels to PyPI
#         if: startsWith(github.ref, 'refs/tags/')
#         env:
#           TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#         run: |
#           pip install twine
#           twine upload --skip-existing dist/*manylinux*.whl
